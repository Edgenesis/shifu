trigger:
  branches:
    include:
    - main
    - releases/*
  paths:
    exclude:
    - docs
    - examples
    - img
    - ./*.md
    - LICENSE
    - .devcontainer
    - .github
    - CHANGELOG

pr:
  branches:
    include:
    - main
    - releases/*
  paths:
    exclude:
    - docs
    - examples
    - img
    - ./*.md
    - LICENSE
    - .devcontainer
    - .github
    - CHANGELOG

pool:
   vmImage: 'ubuntu-latest'

steps:
- task: GoTool@0
  inputs:
    version: '1.17.11'
- task: DockerInstaller@0
  displayName: Docker Installer
  inputs:
    dockerVersion: 20.10.9
    releaseType: stable    
- task: KubectlInstaller@0
  inputs:
     kubectlVersion: latest   
- task: Go@0
  displayName: "Kind Installer"
  inputs:
    command: 'get'
    arguments: 'sigs.k8s.io/kind@v0.14.0'  
- task: Go@0
  displayName: "go get"
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/deviceshifu'
- task: Go@0
  displayName: "go build deviceshifu"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/cmd'
- task: Go@0
  displayName: "go build deviceshifuSocket"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/cmd/cmdSocket'
- task: Go@0
  displayName: "go build deviceshifuMQTT"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/cmd/cmdMQTT'
- task: Go@0
  displayName: "go build deviceshifuOPCUA"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/cmd/cmdOPCUA'
- task: Go@0
  displayName: "go test deviceshifu"
  inputs:
    command: 'test'
    arguments: '-v'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/deviceshifu'
- task: Go@0
  displayName: "go test deviceshifuSocket"
  inputs:
    command: 'test'
    arguments: '-v'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/deviceshifuSocket'
- task: Go@0
  displayName: "go test deviceshifuMQTT"
  inputs:
    command: 'test'
    arguments: '-v'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/deviceshifuMQTT'
- task: Go@0
  displayName: "go test deviceshifuOPCUA"
  inputs:
    command: 'test'
    arguments: '-v'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/deviceshifuOPCUA'
- task: Go@0
  displayName: "go build mockdevice agv"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/mockdevice/mockdevice-agv'
- task: Go@0
  displayName: "go build mockdevice plate reader"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/mockdevice/mockdevice-plate-reader'
- task: Go@0
  displayName: "go build mockdevice plc"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/mockdevice/mockdevice-plc'
- task: Go@0
  displayName: "go build mockdevice robot arm"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/mockdevice/mockdevice-robot-arm'
- task: Go@0
  displayName: "go build mockdevice thermometer"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/mockdevice/mockdevice-thermometer'
- task: Go@0
  displayName: "go test mockdevice"
  inputs:
    command: 'test'
    arguments: '-v'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/mockdevice/mockdevice'
- task: Go@0
  displayName: "go build http to ssh stub"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/driver_util'
- displayName: "kubectl E2E test"
  script: |
    kind --version
    kind delete cluster && kind create cluster
    kubectl version
    kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/crd/install/shifu_install.yml
    kubectl wait  --for=condition=Available  deploy/shifu-crd-controller-manager -n shifu-crd-system --timeout=150s
    kubectl run nginx --image=nginx:1.21 -n deviceshifu
    kubectl wait  --for=condition=Available  pod/nginx -n deviceshifu --timeout=150s
    kubectl apply -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/demo_device/edgedevice-plc
    kubectl wait  --for=condition=Available  deploy/plc -n devices --timeout=150s
    kubectl wait  --for=condition=Available  deploy/deviceshifu-plc-deployment -n deviceshifu --timeout=150s
    kubectl exec -it -n deviceshifu --attach=true nginx -- curl deviceshifu-plc/getcontent?rootaddress=Q;echo
    kubectl delete -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/demo_device/edgedevice-plc
    kubectl apply -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/demo_device/edgedevice-agv
    kubectl wait  --for=condition=Available  deploy/deviceshifu-agv-deployment -n deviceshifu --timeout=150s
    kubectl wait  --for=condition=Available  deploy/agv -n devices --timeout=150s
    kubectl exec -it -n deviceshifu --attach=true nginx -- curl http://deviceshifu-agv/get_position
    kubectl delete -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/demo_device/edgedevice-agv
    kubectl apply -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/demo_device/edgedevice-plate-reader
    kubectl wait  --for=condition=Available  deploy/deviceshifu-plate-reader-deployment -n deviceshifu --timeout=150s
    kubectl wait  --for=condition=Available  deploy/plate-reader -n devices --timeout=150s
    kubectl exec -it -n deviceshifu --attach=true nginx -- curl http://deviceshifu-plate-reader/get_measurement
    kubectl delete -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/demo_device/edgedevice-plate-reader
    kubectl apply -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/demo_device/edgedevice-robot-arm
    kubectl wait  --for=condition=Available  deploy/deviceshifu-robotarm-deployment -n deviceshifu --timeout=150s
    kubectl wait  --for=condition=Available  deploy/robotarm -n devices --timeout=150s
    kubectl exec -it -n deviceshifu --attach=true nginx -- curl http://deviceshifu-robotarm/get_coordinate
    kubectl delete -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/demo_device/edgedevice-robot-arm
    kubectl apply -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/demo_device/edgedevice-thermometer
    kubectl wait  --for=condition=Available  deploy/deviceshifu-thermometer-deployment -n deviceshifu --timeout=150s
    kubectl wait  --for=condition=Available  deploy/thermometer -n devices --timeout=150s
    kubectl exec -it -n deviceshifu --attach=true nginx -- curl http://deviceshifu-thermometer/read_value
    kubectl delete -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/demo_device/edgedevice-thermometer
    kubectl apply -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/hello-world-device/configuration/
    kubectl delete -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/hello-world-device/configuration/
    kubectl apply -f $(System.DefaultWorkingDirectory)/examples/mqttDeviceShifu/mqtt_deploy/
    kubectl delete -f $(System.DefaultWorkingDirectory)/examples/mqttDeviceShifu/mqtt_deploy/
    kubectl apply -f $(System.DefaultWorkingDirectory)/examples/opcuaDeviceShifu/opcua_deploy/
    kubectl delete -f $(System.DefaultWorkingDirectory)/examples/opcuaDeviceShifu/opcua_deploy/
    kubectl apply -f $(System.DefaultWorkingDirectory)/examples/rtspDeviceShifu/camera-deployment/
    kubectl delete -f $(System.DefaultWorkingDirectory)/examples/rtspDeviceShifu/camera-deployment/
    kubectl apply -f $(System.DefaultWorkingDirectory)/examples/siemensPLCDeviceShifu/plc-deployment/
    kubectl delete -f $(System.DefaultWorkingDirectory)/examples/siemensPLCDeviceShifu/plc-deployment/
    kubectl apply -f $(System.DefaultWorkingDirectory)/examples/socketDeviceShifu/
    kubectl delete -f $(System.DefaultWorkingDirectory)/examples/socketDeviceShifu/
    kubectl delete pod nginx          
    kubectl delete -f $(System.DefaultWorkingDirectory)/k8s/crd/install/shifu_install.yml
