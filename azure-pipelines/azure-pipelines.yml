trigger:
  branches:
    include:
    - main
    - releases/*
  paths:
    exclude:
    - docs
    - examples
    - img
    - ./*.md
    - LICENSE
    - .devcontainer
    - .github
    - CHANGELOG

pr:
  branches:
    include:
    - main
    - releases/*
  paths:
    exclude:
    - docs
    - examples
    - img
    - ./*.md
    - LICENSE
    - .devcontainer
    - .github
    - CHANGELOG

variables:
  tag: 'v0.0.1'

pool:
   vmImage: 'ubuntu-latest'

# Initialization
steps:
- task: GoTool@0
  inputs:
    version: '1.17.11'
- task: DockerInstaller@0
  displayName: Docker Installer
  inputs:
    dockerVersion: 20.10.9
    releaseType: stable
- task: KubectlInstaller@0
  inputs:
     kubectlVersion: latest
- task: Go@0
  displayName: "Kind Installer"
  inputs:
    command: 'get'
    arguments: 'sigs.k8s.io/kind@v0.14.0'

# Running and executing codes
- task: Go@0
  displayName: "go get"
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/deviceshifu'
- task: Go@0
  displayName: "crd go get"
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(System.DefaultWorkingDirectory)/k8s/crd'
- task: Go@0
  displayName: "go build deviceshifu"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/cmd'
- task: Go@0
  displayName: "go build deviceshifuSocket"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/cmd/cmdSocket'
- task: Go@0
  displayName: "go build deviceshifuMQTT"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/cmd/cmdMQTT'
- task: Go@0
  displayName: "go build deviceshifuOPCUA"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/cmd/cmdOPCUA'
- task: Go@0
  displayName: "go test deviceshifu"
  inputs:
    command: 'test'
    arguments: '-v'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/deviceshifu'
- task: Go@0
  displayName: "go test deviceshifuSocket"
  inputs:
    command: 'test'
    arguments: '-v'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/deviceshifuSocket'
- task: Go@0
  displayName: "go test deviceshifuMQTT"
  inputs:
    command: 'test'
    arguments: '-v'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/deviceshifuMQTT'
- task: Go@0
  displayName: "go test deviceshifuOPCUA"
  inputs:
    command: 'test'
    arguments: '-v'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/deviceshifuOPCUA'
- task: Go@0
  displayName: "go build mockdevice agv"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/mockdevice/mockdevice-agv'
- task: Go@0
  displayName: "go build mockdevice plate reader"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/mockdevice/mockdevice-plate-reader'
- task: Go@0
  displayName: "go build mockdevice plc"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/mockdevice/mockdevice-plc'
- task: Go@0
  displayName: "go build mockdevice robot arm"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/mockdevice/mockdevice-robot-arm'
- task: Go@0
  displayName: "go build mockdevice thermometer"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/mockdevice/mockdevice-thermometer'
- task: Go@0
  displayName: "go test mockdevice"
  inputs:
    command: 'test'
    arguments: '-v'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deviceshifu/pkg/mockdevice/mockdevice'
- task: Go@0
  displayName: "go build http to ssh stub"
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/driver_util'
- script: |
    docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  displayName: register QEMU for multi-platform Docker build

# build device Docker images
- script: |
    docker buildx build --platform=linux/amd64 
    -f $(System.DefaultWorkingDirectory)/deviceshifu/Dockerfile.deviceshifu 
    --build-arg PROJECT_ROOT="$(System.DefaultWorkingDirectory)" $(System.DefaultWorkingDirectory) 
    -t edgehub/deviceshifu-http-http:$(tag)
  displayName: build edgehub/deviceshifu-http-http

- script: |
    docker buildx build --platform=linux/amd64 
    -f $(System.DefaultWorkingDirectory)/deviceshifu/Dockerfile.deviceshifuSocket 
    --build-arg PROJECT_ROOT="$(System.DefaultWorkingDirectory)" $(System.DefaultWorkingDirectory) 
    -t edgehub/edgehub/deviceshifu-http-socket:$(tag)
  displayName: build edgehub/deviceshifu-http-socket

- script: |
    docker buildx build --platform=linux/amd64 
    -f $(System.DefaultWorkingDirectory)/deviceshifu/Dockerfile.deviceshifuMQTT 
    --build-arg PROJECT_ROOT="$(System.DefaultWorkingDirectory)" $(System.DefaultWorkingDirectory) 
    -t edgehub/deviceshifu-http-mqtt:$(tag)
  displayName: build edgehub/deviceshifu-http-mqtt

- script: |
    docker buildx build --platform=linux/amd64 
    -f $(System.DefaultWorkingDirectory)/k8s/crd/Dockerfile
    --build-arg PROJECT_ROOT="$(System.DefaultWorkingDirectory)" $(System.DefaultWorkingDirectory) 
    -t edgehub/edgedevice-controller-multi:$(tag)
  displayName: build edgehub/edgedevice-controller-multi

- script: |
    docker buildx build --platform=linux/amd64 
    -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/mockdevice/thermometer/Dockerfile.mockdevice-thermometer 
    --build-arg PROJECT_ROOT="$(System.DefaultWorkingDirectory)" $(System.DefaultWorkingDirectory) 
    -t edgehub/mockdevice-thermometer:$(tag)
  displayName: build edgehub/mockdevice-thermometer

- script: |
    docker buildx build --platform=linux/amd64 
    -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/mockdevice/robot-arm/Dockerfile.mockdevice-robot-arm
    --build-arg PROJECT_ROOT="$(System.DefaultWorkingDirectory)" $(System.DefaultWorkingDirectory) 
    -t edgehub/mockdevice-robot-arm:$(tag)
  displayName: build edgehub/mockdevice-robot-arm

- script: |
    docker buildx build --platform=linux/amd64 
    -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/mockdevice/plate-reader/Dockerfile.mockdevice-plate-reader 
    --build-arg PROJECT_ROOT="$(System.DefaultWorkingDirectory)" $(System.DefaultWorkingDirectory) 
    -t edgehub/mockdevice-plate-reader:$(tag)
  displayName: build edgehub/mockdevice-plate-reader

- script: |
    docker buildx build --platform=linux/amd64 
    -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/mockdevice/agv/Dockerfile.mockdevice-agv
    --build-arg PROJECT_ROOT="$(System.DefaultWorkingDirectory)" $(System.DefaultWorkingDirectory) 
    -t edgehub/mockdevice-agv:$(tag)
  displayName: build edgehub/mockdevice-agv

- script: |
    docker buildx build --platform=linux/amd64 
    -f $(System.DefaultWorkingDirectory)/deviceshifu/examples/mockdevice/thermometer/Dockerfile.mockdevice-plc
    --build-arg PROJECT_ROOT="$(System.DefaultWorkingDirectory)" $(System.DefaultWorkingDirectory) 
    -t edgehub/mockdevice-plc:$(tag)
  displayName: build edgehub/mockdevice-plc

# - task: Docker@2
#   displayName: Build deviceShifu HTTP2MQTT image
#   inputs:
#     repository: edgehub/deviceshifu-http-mqtt
#     command: build
#     Dockerfile: deviceshifu/Dockerfile.deviceshifuMQTT
#     tags: '$(tag)'
# - task: Docker@2
#   displayName: Build deviceShifu HTTP2OPCUA image
#   inputs:
#     repository: edgehub/deviceshifu-http-opcua
#     command: build
#     Dockerfile: deviceshifu/Dockerfile.deviceshifuOPCUA
#     tags: '$(tag)'
# - task: Docker@2
#   displayName: Build deviceShifu HTTP2Socket image
#   inputs:
#     repository: edgehub/deviceshifu-http-socket
#     command: build
#     Dockerfile: deviceshifu/Dockerfile.deviceshifuSocket
#     tags: '$(tag)'

# load the images to Kind
- script: |
    set -e
    docker buildx create --use
    make buildx-build-image-deviceshifu
  displayName: "Build Shifu Docker images using Docker BuildX"
- script: |
    set -e
    kind --version
    kind delete cluster && kind create cluster
    kubectl version
    kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/crd/install/shifu_install.yml
    kubectl wait --for=condition=Available deploy/shifu-crd-controller-manager -n shifu-crd-system --timeout=150s
  displayName: "setup Kind cluster and install Shifu"
- script: |
    set -e
    kind load docker-image edgehub/deviceshifu-http-http:v0.0.1
    kind load docker-image edgehub/deviceshifu-http-mqtt:v0.0.1
    kind load docker-image edgehub/deviceshifu-http-opcua:v0.0.1
    kind load docker-image edgehub/deviceshifu-http-socket:v0.0.1
  displayName: "load Shifu Docker images into Kind cluster"