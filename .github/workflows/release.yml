
name: Auto Generate Release Log

on:
  workflow_dispatch:
    inputs:
      tag_name:
        required: true
        type: string
      previous_tag_name:
        required: true
        type: string
      target_commitish:
        required: true
        type: string
  schedule:
    - cron: '30 15 * * 1,3' # 15:30 Mon, Wed 

permissions:
  contents: write
  pull-requests: write

jobs:
  generate_changelog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v4
        with:
          go-version: "1.22.x"
      
      - name: check correct week
        id: check_week
        run: |
          day_of_week=$(date +%u)
          week_number=$(( ($(date +%s) / (60*60*24*7)) % 2 ))
          if [ "$day_of_week" -eq 1 ] && [ "$week_number" -eq 0 ]; then
            echo "::set-output name=RUN_WORKFLOW::true"
          elif [ "$day_of_week" -eq 3 ] && [ "$week_number" -eq 1 ]; then
            echo "::set-output name=RUN_WORKFLOW::true"
          else
            echo "::set-output name=RUN_WORKFLOW::false"
          fi

      - name: set up git
        if: steps.check_week.outputs.RUN_WORKFLOW == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: get latest tag
        if: github.event_name != 'workflow_dispatch' && steps.check_week.outputs.RUN_WORKFLOW == 'true'
        id: get_latest_tag
        run: | 
          git fetch --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "::set-output name=LATEST_TAG::${latest_tag}"

      - name: manually set version
        if: github.event_name == 'workflow_dispatch' && steps.check_week.outputs.RUN_WORKFLOW == 'true'
        id: set_version
        run: |
          new_tag="${{ github.event.inputs.tag_name }}"
          current_tag="${{ github.event.inputs.previous_tag_name }}"
          echo "NEW_TAG=${new_tag}" >> "$GITHUB_ENV"
        env:
          GITHUB_ENV: ${{ env.GITHUB_ENV }}

      - name: automatically set version
        if: github.event_name != 'workflow_dispatch' && steps.check_week.outputs.RUN_WORKFLOW == 'true'
        id: set_version_auto
        run: |
          current_tag="${{ steps.get_latest_tag.outputs.LATEST_TAG }}"
          current_tag=${current_tag#v}
          if [[ "$current_tag" == *"-rc1" ]]; then
            current_tag=${current_tag%-rc1}
          fi
          IFS='.' read -r x y z <<< "$current_tag"
          y=$((y + 1))
          day_of_week=$(date +%u)
          if [ "$day_of_week" -eq 1 ]; then
            new_tag="v${x}.${y}.${z}"
          else
            new_tag="v${x}.${y}.${z}-rc1"
          fi
          echo "NEW_TAG=${new_tag}" >> "$GITHUB_ENV"
        env:
          GITHUB_ENV: ${{ env.GITHUB_ENV }}

      - name: generate changelog
        if: steps.check_week.outputs.RUN_WORKFLOW == 'true'
        run: |
          set -e
          target_commitish="${{ github.event.inputs.target_commitish || 'main' }}"
          response=$(curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/Edgenesis/shifu/releases/generate-notes \
          -d '{"tag_name":"${{ env.NEW_TAG }}","target_commitish":"'"${target_commitish}"'","previous_tag_name":"${{ env.PREVIOUS_TAG }}"}')
          echo $response
          go run tools/release/release.go "$response"
        env:
          AZURE_OPENAI_APIKEY: ${{ secrets.AZURE_OPENAI_APIKEY }}
          AZURE_OPENAI_HOST: ${{ secrets.AZURE_OPENAI_HOST }}
          DEPLOYMENT_NAME: ${{secrets.DEPLOYMENT_NAME}}
          GITHUB_ENV: ${{ env.GITHUB_ENV }}

      - name: Create Pull Request
        if: steps.check_week.outputs.RUN_WORKFLOW == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: add changelog for ${{ env.NEW_TAG }}
          title: add changelog for ${{ env.NEW_TAG }}
          body: add changelog for ${{ env.NEW_TAG }}
          branch: changelog-${{ env.NEW_TAG }}
          base: main
      
      - name: make release branch
        run: |
          git checkout main
          git pull
          git checkout -b "release_${{ env.NEW_TAG }}"
          git push origin HEAD
        env:
          GITHUB_ENV: ${{ env.GITHUB_ENV }}
